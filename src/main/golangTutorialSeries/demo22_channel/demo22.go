package main

import "fmt"

/*
信道
*/

/*
所有信道都关联了一个类型。信道只能运输这种类型的数据，而运输其他类型的数据都是非法的。

chan T 表示 T 类型的信道。

信道的零值为 nil。信道的零值没有什么用，应该像对 map 和切片所做的那样，用 make 来定义信道。
*/
func main() {
	var a chan int
	if a == nil {
		fmt.Println("信道值是 nil， 去定义他")
		//创建了一个整数类型的通道a。
		//a = make(chan int)
		a := make(chan int)
		fmt.Printf("Type of a is %T", a)
	}
	//通过信道进行发送和接收
	/*
		发送与接收默认是阻塞的。当把数据发送到信道时，程序控制会在发送数据的语句处发生阻塞，直到有其它 Go 协程从信道读取到数据，才会解除阻塞。与此类似，当读取信道的数据时，如果没有其它的协程把数据写入到这个信道，那么读取过程就会一直阻塞着。

		信道的这种特性能够帮助 Go 协程之间进行高效的通信，不需要用到其他编程语言常见的显式锁或条件变量。
	*/
	data := <-a // 读取信道 a
	a <- data   // 写入信道 a
}
